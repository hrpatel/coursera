"""
Example code for creating and visualizing
cluster of county-based cancer risk data

Note that you must download the file
http://www.codeskulptor.org/#alg_clusters_matplotlib.py
to use the matplotlib version of this code
"""

# Flavor of Python - desktop or CodeSkulptor
DESKTOP = True

import math
import alg_cluster
import matplotlib.pyplot as plt


# conditional imports
if DESKTOP:
    import project
    import alg_clusters_matplotlib
else:
    import alg_clusters_simplegui
    import codeskulptor

    codeskulptor.set_timeout(30)


# ##################################################
# Code to load data tables

# URLs for cancer risk data tables of various sizes
# Numbers indicate number of counties in data table
DIRECTORY = "http://commondatastorage.googleapis.com/codeskulptor-assets/"
DATA_3108_URL = "unifiedCancerData_3108.csv"
DATA_896_URL = "unifiedCancerData_896.csv"
DATA_290_URL = "unifiedCancerData_290.csv"
DATA_111_URL = "unifiedCancerData_111.csv"


def load_data_table(data_url):
    """
    Import a table of county-based cancer risk data
    from a csv format file
    """
    data_file = open(data_url)
    data = data_file.read()
    data_lines = data.split('\n')
    print "Loaded", len(data_lines), "data points"
    data_tokens = [line.split(',') for line in data_lines]
    return [[tokens[0], float(tokens[1]), float(tokens[2]), int(tokens[3]), float(tokens[4])]
            for tokens in data_tokens]


############################################################
# Code to create sequential clustering
# Create alphabetical clusters for county data

def sequential_clustering(singleton_list, num_clusters):
    """
    Take a data table and create a list of clusters
    by partitioning the table into clusters based on its ordering
    
    Note that method may return num_clusters or num_clusters + 1 final clusters
    """

    cluster_list = []
    cluster_idx = 0
    total_clusters = len(singleton_list)
    cluster_size = float(total_clusters) / num_clusters

    for cluster_idx in range(len(singleton_list)):
        new_cluster = singleton_list[cluster_idx]
        if math.floor(cluster_idx / cluster_size) != \
                math.floor((cluster_idx - 1) / cluster_size):
            cluster_list.append(new_cluster)
        else:
            cluster_list[-1] = cluster_list[-1].merge_clusters(new_cluster)

    return cluster_list


#####################################################################
# Code to load cancer data, compute a clustering and 
# visualize the results

def run_example():
    """
    Load a data table, compute a list of clusters and 
    plot a list of clusters

    Set DESKTOP = True/False to use either matplotlib or simplegui
    """
    data_table = load_data_table(DATA_3108_URL)

    singleton_list = []
    for line in data_table:
        singleton_list.append(alg_cluster.Cluster(set([line[0]]), line[1], line[2], line[3], line[4]))

    # cluster_list = sequential_clustering(singleton_list, 50)
    # print "Displaying", len(cluster_list), "sequential clusters"

    # cluster_list = project.hierarchical_clustering(singleton_list, 15)
    # print "Displaying", len(cluster_list), "hierarchical clusters"

    cluster_list = project.kmeans_clustering(singleton_list, 15, 5)
    print "Displaying", len(cluster_list), "k-means clusters"

    # draw the clusters using matplotlib or simplegui
    if DESKTOP:
        alg_clusters_matplotlib.plot_clusters(data_table, cluster_list, True)
    else:
        alg_clusters_simplegui.PlotClusters(data_table, cluster_list)


def assignment_q2():
    """
    Load a data table, compute a list of clusters and
    plot a list of clusters
    """
    data_table = load_data_table(DATA_3108_URL)
    singleton_list = []
    for line in data_table:
        singleton_list.append(alg_cluster.Cluster(set([line[0]]), line[1], line[2], line[3], line[4]))

    cluster_list = project.hierarchical_clustering(singleton_list, 15)
    print "Displaying", len(cluster_list), "hierarchical clusters"

    alg_clusters_matplotlib.plot_clusters(data_table, cluster_list, True)


def assignment_q3():
    """
    Load a data table, compute a list of clusters and
    plot a list of clusters
    """
    data_table = load_data_table(DATA_3108_URL)
    singleton_list = []
    for line in data_table:
        singleton_list.append(alg_cluster.Cluster(set([line[0]]), line[1], line[2], line[3], line[4]))

    cluster_list = project.kmeans_clustering(singleton_list, 15, 5)
    print "Displaying", len(cluster_list), "k-means clusters"

    alg_clusters_matplotlib.plot_clusters(data_table, cluster_list, True)


def assignment_q5():
    """
    Load a data table, compute a list of clusters and
    plot a list of clusters
    """
    data_table = load_data_table(DATA_111_URL)
    singleton_list = []
    for line in data_table:
        singleton_list.append(alg_cluster.Cluster(set([line[0]]), line[1], line[2], line[3], line[4]))

    cluster_list = project.hierarchical_clustering(singleton_list, 9)

    # q7
    distortion = compute_distortion(cluster_list, data_table)
    print "hierarchical_clustering distortion:", distortion

    print "Displaying", len(cluster_list), "hierarchical clusters"

    alg_clusters_matplotlib.plot_clusters(data_table, cluster_list, True)


def assignment_q6():
    """
    Load a data table, compute a list of clusters and
    plot a list of clusters
    """
    data_table = load_data_table(DATA_111_URL)
    singleton_list = []
    for line in data_table:
        singleton_list.append(alg_cluster.Cluster(set([line[0]]), line[1], line[2], line[3], line[4]))

    cluster_list = project.kmeans_clustering(singleton_list, 9, 5)

    # q7
    distortion = compute_distortion(cluster_list, data_table)
    print "kmeans_clustering distortion:", distortion

    print "Displaying", len(cluster_list), "k-means clusters"

    alg_clusters_matplotlib.plot_clusters(data_table, cluster_list, True)


def compute_distortion(cluster_list, data_table):
    distortion = 0
    for idx in range(len(cluster_list)):
        distortion += cluster_list[idx].cluster_error(data_table)
    return distortion


def assignment_q10_data():
    """
    Load a data table, compute a list of clusters and
    plot a list of clusters
    """

    distortions = {}

    methods = {"kmeans": project.kmeans_clustering,
               "hierarchical": project.hierarchical_clustering}

    data_tables = {"111": "unifiedCancerData_111.csv",
            "290": "unifiedCancerData_290.csv",
            "896": "unifiedCancerData_896.csv"}

    # loop through each data file
    for data in data_tables.keys():
        distortions[data] = {}

        # read in the data
        data_table = load_data_table(data_tables[data])
        singleton_list = []

        # loop through each clustering method
        for method in ["kmeans"]:
            distortions[data][method] = []

            for line in data_table:
                singleton_list.append(alg_cluster.Cluster(set([line[0]]), line[1], line[2], line[3], line[4]))

            # loop through cluster sizes in reverse
            for num_clusters in range(100, 5, -1):
                # for line in data_table:
                #     singleton_list.append(alg_cluster.Cluster(set([line[0]]), line[1], line[2], line[3], line[4]))

                if method == "kmeans":
                    cluster_list = []
                    cluster_list = methods[method](singleton_list, num_clusters, 5)
                elif method == "hierarchical":
                    cluster_list = methods[method](singleton_list, num_clusters)

                distortion = compute_distortion(cluster_list, data_table)
                # print distortion
                distortions[data][method].append(distortion)

                print "done with:", method, "method,", num_clusters, "data,", data, "clusters"

            print
            print

        print
        print

    print distortions


def assignment_q10_graphs():
    km = {'111': {'kmeans': [123389671106.6206, 175790688405.04092, 759942764081.7703, 766164323730.377, 832686332037.8881, 935006312816.8608, 1657964503255.6284, 1657964503255.6284, 1657964503255.628, 1657964503255.6284, 1657964503255.6284, 1657964503255.6284, 1657964503255.628, 1657964503255.628, 1657964503255.6282]},
          '290': {'kmeans': [186562044404.06274, 512210719203.2905, 1322574217936.0776, 1349020794019.0647, 1915812010529.2222, 2051303178519.582, 3823103347362.715, 3823103347362.7144, 3823103347362.7144, 3823103347362.7144, 3823103347362.714, 3823103347362.713, 3823103347362.7144, 3823103347362.713, 3823103347362.714]},
          '896': {'kmeans': [341850583704.0547, 785896792122.8099, 2213209979110.9946, 2288964932266.3765, 2906247062507.2637, 3180777114480.171, 5830701530094.441, 5830701530094.441, 5830701530094.443, 5830701530094.446, 5830701530094.449, 5830701530094.45, 5830701530094.446, 5830701530094.444, 5830701530094.442]}}
    hi = {'111': {'hierarchical': [43346616567.370995, 43572685067.322044, 47956771398.36999, 75195590422.5596, 76305792806.40341, 83751677988.91672, 92851824733.8917, 95061330400.91187, 123364931819.36792, 128691501288.44057, 136007319294.4524, 175163886915.8305, 256295541683.34512, 304487213235.6511, 473061548301.70715]},
          '290': {'hierarchical': [158866394846.55307, 165854841465.23853, 209424475932.79617, 210882439099.43875, 257523094470.34372, 265642320327.18256, 273999812286.6749, 300957083742.44525, 409759400590.09357, 452595640777.7162, 479106607308.0914, 607404453849.4803, 607704110695.7351, 873386979469.7281, 1721363375274.0847]},
          '896': {'hierarchical': [377806730495.8184, 463371219437.6528, 466383317148.95233, 468733959164.0338, 504815920302.4635, 509864466993.6245, 581040540888.136, 635476455541.3553, 775480684213.7341, 887973140164.112, 947764944638.2128, 972923457621.6617, 1228012004919.8132, 1263342391158.555, 2211819145957.3906]}}

    hi = {'111': {'hierarchical': [23281677.034011245, 30144814.75517906, 53212516.43662036, 54344836.09347915, 58845532.33084705, 64198882.37133243, 70697812.31659345, 72046292.4879327, 119545122.76079305, 125182388.66457911, 130576366.09987994, 137550999.45703605, 158369218.75110385, 172097782.54544765, 184226415.17081726, 198529733.41560605, 199220122.6429075, 251473821.57561803, 274820018.890072, 338949110.6343053, 381675381.9818935, 419155611.41225475, 421482308.04959816, 429224529.2992974, 454059203.64882, 477722700.88365084, 539988800.9909155, 601174827.0361061, 629486320.303132, 635145299.0814581, 639842249.6777377, 726554646.999623, 755479427.9922571, 842362406.8882793, 855989687.9257218, 859353004.9680824, 887599757.7456034, 935697009.819895, 1294617070.4766314, 1478023324.4625294, 1655456930.0622706, 1664577566.6175237, 1701375623.5859241, 1785464581.2634947, 2283581146.9910283, 2379303780.4002357, 2421029748.3684697, 2480813298.6933, 2957863324.087939, 2969097701.7746453, 2978193364.514415, 3628401492.972584, 3777415638.248768, 3851005476.1502304, 4613487554.807351, 4630293391.740919, 5223656372.817068, 5710957156.010717, 7182061870.972234, 7361347870.870243, 7852333614.482259, 7872282678.460497, 9395463610.899057, 9782761183.725765, 11088575287.909327, 16782692529.75546, 17374877704.516716, 18384134644.930412, 18412340691.678547, 18466445682.48675, 20503240558.115753, 22457226005.802895, 22820632841.93465, 23224423035.586258, 24047314099.2878, 31634861562.298416, 32258854161.227127, 32958859171.63682, 38256597600.15317, 42235409183.41765, 43346616567.370995, 43572685067.322044, 47956771398.36999, 75195590422.5596, 76305792806.40341, 83751677988.91672, 92851824733.8917, 95061330400.91187, 123364931819.36792, 128691501288.44057, 136007319294.4524, 175163886915.8305, 256295541683.34512, 304487213235.6511, 473061548301.70715]},
          '290': {'hierarchical': [6503252567.820965, 6598975201.230171, 6780006254.067845, 6826277572.336439, 6904161807.408951, 6963945357.733781, 7440995383.12842, 7552129807.487029, 7773903138.99411, 7871218338.677597, 7965130367.548158, 7986242504.377349, 8026235363.980885, 8220961754.034846, 8224907521.923533, 8314998904.833723, 8986628121.652042, 9190912922.218699, 9524196534.005497, 9641092552.530504, 10023438718.068008, 10059455267.909605, 10514856481.439629, 11277338560.096752, 11590518830.623604, 11879886992.069004, 12121748930.90225, 13356958858.30976, 13389513172.016878, 13466457434.577791, 13504546057.617949, 13978688889.542639, 14045567123.748735, 14442041887.756308, 14506689322.60834, 15107862716.487219, 15769385051.80713, 15836050135.908659, 16273026131.719614, 19730019662.632248, 19749595156.59756, 20387048446.209034, 20522819785.77261, 20660133385.095184, 22183314317.533745, 22700203228.01348, 24049856233.60923, 29743973475.45536, 29918051990.37645, 29976144314.727997, 31339371904.102406, 31658626513.78258, 33727822112.209557, 34148782742.411034, 35506799721.66518, 38396988414.81593, 38825681149.1907, 40247996372.592964, 42291077752.48699, 42873773334.03474, 43554365280.179535, 45822881127.66345, 47390858830.00616, 48664619588.90572, 60434743297.70688, 61753069795.86238, 62872545597.02883, 64021624597.730774, 70209807673.31631, 75090743872.39958, 77034645575.70801, 78779180689.26118, 85186359081.42249, 88331410409.24721, 89980587137.0736, 102767180241.90625, 105706536319.02792, 112685435465.57863, 128453390633.75012, 141069146296.22678, 158866394846.55307, 165854841465.23853, 209424475932.79617, 210882439099.43875, 257523094470.34372, 265642320327.18256, 273999812286.6749, 300957083742.44525, 409759400590.09357, 452595640777.7162, 479106607308.0914, 607404453849.4803, 607704110695.7351, 873386979469.7281, 1721363375274.0847]},
          '896': {'hierarchical': [33942220812.77441, 34789137542.44239, 35212896251.90955, 35861901670.44947, 36099174928.98758, 36166042284.13239, 36431043592.837494, 37043871609.22653, 37728160808.568695, 37777595982.66976, 37987240969.01051, 38445334259.05858, 39264577188.74259, 39689286468.39426, 41100768619.82934, 41843546776.562004, 42659730720.30855, 42833498996.55805, 43076922987.449104, 43291860049.32851, 43614107672.33332, 45137288604.77188, 45207365500.309326, 45493540153.17725, 47243052257.112656, 52937169498.958786, 54075127901.97255, 54726621268.93888, 55396199107.7134, 55662770941.3092, 56726680702.455055, 57056917758.14009, 57989732472.49487, 59303889070.25861, 59729529231.398415, 61111205663.690796, 62177749327.110855, 63071849683.12865, 64431197565.85275, 68555012567.68092, 68747717722.73335, 71083782911.17934, 71732351772.18867, 75412086291.75706, 76966413818.83037, 77002142673.10558, 81315318512.12994, 82095148658.34625, 83336318934.52014, 89087891579.44116, 90222417104.2821, 91408432671.71732, 92843899520.44498, 93034833665.39212, 98247028887.15985, 102747168310.25215, 107273243434.47401, 114406269423.1584, 120481920768.2684, 146385674705.99274, 148642475997.8577, 148727774177.4267, 152496219121.7203, 163849895399.55267, 167297399940.54755, 167595062581.50922, 180999966248.45685, 197486689706.28784, 202768671341.19998, 207743154417.3484, 231699554414.72134, 241071994585.40125, 248050893731.95197, 250094508161.96506, 251917687605.90054, 271155805731.9085, 328534646856.8065, 346299437429.2069, 349709292317.8878, 363674215669.78186, 377806730495.8184, 463371219437.6528, 466383317148.95233, 468733959164.0338, 504815920302.4635, 509864466993.6245, 581040540888.136, 635476455541.3553, 775480684213.7341, 887973140164.112, 947764944638.2128, 972923457621.6617, 1228012004919.8132, 1263342391158.555, 2211819145957.3906]}}

    km = {'111': {'kmeans': [256259695.4054426, 258586392.042786, 272658994.90641797, 274007475.07775724, 283216962.88187706, 288875941.6602031, 289174666.1225489, 296916887.37224805, 298049207.0291068, 311676488.06654936, 311911969.2645528, 371695519.5893827, 413421487.557617, 771523432.8062304, 805130385.2533116, 1248410917.0935998, 1259054659.947463, 1259856425.5068998, 1488805807.6585383, 1506308959.0652125, 1579898796.9666748, 1592867999.580655, 1997354422.1539373, 2002939109.09554, 2039737166.0639405, 2611647906.3307114, 2760662051.6068954, 3910338710.2735405, 3919038771.349921, 4091955008.8258386, 4109282924.7018523, 4127854423.1756287, 4130477518.712802, 4136114784.616588, 4231837418.025795, 4269347030.482324, 4353435988.159894, 4356217563.496323, 4404314815.570615, 4418618133.815403, 4862380892.352541, 4890692385.619567, 4895193081.856935, 4908921645.6512785, 10235491114.723923, 10240982190.825932, 51826783701.287125, 52746740032.8086, 52766029897.216286, 55696973132.813446, 57129243181.56255, 57132205161.75725, 57135515620.39812, 59089501068.08526, 59351282838.02575, 63001413825.847534, 66006091163.4931, 66029437360.807556, 71433209160.17595, 72276660911.95392, 72301495586.30344, 72324110028.1084, 73290127053.97156, 73402339681.76962, 73463525707.81482, 73463459880.09375, 73646866134.07964, 78275176091.77255, 83491131352.30176, 83758677661.98288, 88593642323.9299, 88620062046.93771, 88649542684.0939, 91506780013.42941, 87807448366.37483, 91568564091.11168, 116491787949.43729, 116554054049.54456, 118485225597.52467, 123316660331.622, 123389671106.6206, 123483080788.27681, 161626921206.76382, 162018028052.88672, 163567291743.99063, 164745271371.3518, 165471040577.26993, 173058588040.28055, 173535638065.6752, 174267507472.60236, 175790688405.04092, 271254226924.20047, 430845493901.4979, 480503404944.00757, 855406302600.9299]},
          '290': {'kmeans': [10569875270.069626, 11383649945.4676, 11448426558.594604, 11471127845.216827, 12053823426.764572, 12157811409.34313, 13193464749.086185, 13411367568.07328, 15395597127.41867, 15470733071.817217, 16682739046.516224, 16711050539.78325, 16715551236.020618, 16732225843.022438, 18077869729.05813, 18172834464.551823, 18201796177.813076, 18201796177.813076, 18207287253.915085, 18269057987.53505, 18374234004.78459, 19961222540.02568, 25643499720.24651, 25395821151.795044, 26509540709.712692, 26564220287.9218, 28261892870.770424, 28014446871.95615, 28017408852.150845, 28025975141.77552, 28111114670.539345, 31124441826.903603, 32958652329.322094, 33220229424.08751, 43319305273.85526, 45810316658.65221, 45878721517.134964, 50636873533.20302, 52117528099.0935, 52142362773.44302, 52166886199.93293, 53132903225.79608, 53393450354.32543, 53614625897.72319, 55243022450.96217, 55271564010.75899, 55284240783.11401, 55673063627.55327, 63443189748.17216, 63934196881.28381, 67476220845.621315, 67522472778.55008, 68923989657.47984, 69080619085.79012, 72252879132.94748, 74089268742.44243, 74137628038.8807, 74153041305.03357, 78657949145.73611, 73762514484.79552, 74574181071.44014, 74953666813.36092, 76787649443.53789, 78014205109.38153, 80036243482.32758, 82706372953.72197, 99343763592.3689, 117936962523.6253, 115979539087.03903, 134510307352.87682, 117907761448.26662, 121474808695.32265, 123732909734.784, 142555220191.28973, 142477979563.16574, 142730164233.77963, 143207214259.17426, 174390203756.85815, 183946394408.45148, 184457276626.61032, 186562044404.06274, 215763229779.78592, 218182336738.10098, 220231070772.07336, 232286884261.00916, 238910074068.03934, 397061951861.4956, 397796574329.07294, 449630999209.31024, 557173759501.5332, 619318206656.0833, 656031563613.5233, 726141205120.559, 1256566786124.0432, 1432446364647.484]},
          '896': {'kmeans': [45555877638.63101, 45637045255.07993, 47681512714.12084, 63857956121.64754, 63958187768.41293, 65163226227.407974, 65311425490.5969, 66355141217.95347, 66502783596.3962, 66612262268.32617, 68570734838.032684, 68613595355.198784, 68778771704.6902, 71711495018.28741, 71714456998.48212, 71800927224.50214, 71890797686.16112, 75198026393.92108, 75553930448.23315, 75635619385.8806, 75870960508.75996, 87906336216.49355, 91629211480.41165, 93820842448.47841, 94025331308.81638, 106664917900.33601, 112204250648.24638, 112859301365.01564, 113108126542.77498, 123661892547.3935, 123445373389.1148, 128933730652.25146, 129054821788.45549, 129203955581.3588, 129023481205.1905, 129162794168.90915, 129385737488.37904, 130131945348.523, 130974330893.64427, 131264044090.2946, 131819951985.00082, 125284240327.6022, 125523572415.38011, 126102522383.37334, 127033855871.65108, 133798200074.90747, 134758194156.17209, 132231534699.55356, 133105571686.99449, 145744102530.90057, 155918644924.69678, 155594176528.90823, 158805300105.82178, 163374063778.15344, 163231021130.0864, 163292261956.11386, 174361719494.62537, 192350771016.16672, 185706357353.69846, 189355244253.13486, 172548144781.5133, 173622628442.67, 175399160098.75638, 176323054599.98056, 186000414342.4022, 176679839443.4687, 184991210416.65027, 207148159439.38425, 242118291256.82568, 264304035250.52228, 271323703938.57877, 283091125922.93146, 286715946456.3483, 303931126361.079, 304456779977.4704, 303964067811.64856, 300935885484.41254, 340039490965.18, 331810244619.7768, 338789052680.62744, 341850583704.0547, 392190427938.5421, 418814444487.6942, 441641633333.34503, 475260676178.591, 477113007869.9135, 693980006271.2808, 707481162063.751, 717297472806.9475, 873017865209.888, 941617184525.7502, 1005638949041.6797, 1149516152182.7866, 1632162002379.899, 2376173737632.8]}}


    for i in km.keys():
        km[i]["kmeans"].reverse()
        hi[i]["hierarchical"].reverse()

        # plot the data
        xvals = range(6, 101)

        plt.plot(xvals, km[i]["kmeans"], '-b', label='kmeans')
        plt.plot(xvals, hi[i]["hierarchical"], '-r', label='hierarchical')
        plt.legend(loc='upper right')
        plt.xlabel(" number of output clusters")
        plt.ylabel("distortion associated with each output clustering")
        plt.title("distortion of the list of {} clusters".format(i))
        plt.show()


